import protocols.CPRequest;import util.Utility;import java.io.IOException;import java.io.InputStream;import java.net.Socket;import java.text.ParseException;import java.util.Arrays;/** * Created by Bernd on 12.11.2015. */public class SocketHandler implements Runnable {    private static final int BUFFER_SIZE = 1024;    final Socket clientSocket;    public SocketHandler(Socket clientSocket) {        this.clientSocket = clientSocket;    }    @Override    public void run() {        System.out.printf("+ Neuer Client: %s\n", clientSocket.toString());        try {            InputStream in = clientSocket.getInputStream();            byte[] globalBuffer = new byte[]{};            boolean lastRoundSuccess = false;            clientSocket.setKeepAlive(true);            while (clientSocket.isConnected() && !clientSocket.isInputShutdown()) {                CPRequest proxyRequest = new CPRequest();                int length = 0;                byte[] buffer = new byte[BUFFER_SIZE];                while (lastRoundSuccess || (length = in.read(buffer)) >= 0) {                    lastRoundSuccess = false;                    if (globalBuffer == null) {                        globalBuffer = Arrays.copyOf(buffer, length);                    } else {                        globalBuffer = Utility.join(globalBuffer, globalBuffer.length, buffer, length);                    }                    globalBuffer = proxyRequest.parse(globalBuffer);                    if (proxyRequest.getRequest() != null) {                        // request wurde geparst und ..                        if (globalBuffer.length != 0) {                            //..es sind noch bytes im globalbuffer                            lastRoundSuccess = true;                        }                        break;                    }                }                if (length < 0) {                    System.out.printf("- EOF disconnect: %s\n", clientSocket.toString());                    return;                }                long processingStartTime = System.nanoTime();                System.out.printf("Neuer Request(Id: %d, Part %d, Client: %d):\n%s\n",                        proxyRequest.hubRequestId,                        proxyRequest.part,                        clientSocket.getPort(),                        proxyRequest.getRequest().requestLine);                Thread handler = new Thread(new RequestHandler(proxyRequest, clientSocket, processingStartTime));                handler.start();                // TODO: handler irgendwo adden.            }            System.out.printf("- Input disconnect: %s\n", clientSocket.toString());        } catch (IOException e) {            e.printStackTrace();            System.out.printf("- Exception Disconnect: %s\n", clientSocket.toString());        } catch (ParseException e) {            e.printStackTrace();            System.out.printf("- Exception Disconnect: %s\n", clientSocket.toString());        }    }}