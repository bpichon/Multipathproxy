import protocols.CPRequest;import protocols.CPResponse;import java.io.IOException;import java.io.OutputStream;import java.net.Socket;import java.util.Arrays;/** * Created by Bernd on 28.11.2015. */public class RequestHandler implements Runnable {    final Socket mobileSocket;    final private CPRequest request;    final private RequestMonitor monitor;    final private long processingStartTime;    public RequestHandler(final CPRequest request, final Socket mobileSocket, long processingStartTime) {        this.mobileSocket = mobileSocket;        this.request = request;        this.processingStartTime = processingStartTime;        this.monitor = RequestMonitor.getInstance();    }    @Override    public void run() {        OutputStream out;        byte[] response;        try {            out = mobileSocket.getOutputStream();            // out nicht closen!            response = monitor.getResponse(request);        } catch (IOException e) {            e.printStackTrace();            return; // TODO: was hat das für Folgen?        } finally {            // Socket nicht closen.        }            double bytesBefore = (double) monitor.getBytesBefore(request);   // ganzzahlig!            int duration = (int) ((System.nanoTime() - processingStartTime) / 1000000); // Nano-Sek to Milli-Sek            // response in mehrere kleinere Responses aufteilen            boolean isLastRange = (request.rangeTo == 100);            final int MAX_SIZE = 6*1024; // Optimaler Wert laut Messungen im WLAN            int partsBefore = (int) Math.ceil(bytesBefore / MAX_SIZE); // Aufrunden            int maxParts = (int) Math.ceil(response.length / MAX_SIZE); //Für diese Antwort            int partCounter = 0;            int sendBytes = 0;            while (sendBytes < response.length) {                int chunkedSize = Math.min(response.length - sendBytes, MAX_SIZE);                final CPResponse proxyResponse = new CPResponse(                        request.hubRequestId,                        request.part,                        partsBefore + partCounter,                        (isLastRange && partCounter == maxParts),                        Arrays.copyOfRange(response, sendBytes, sendBytes + chunkedSize));                partCounter++;                sendBytes += chunkedSize;                try {                    out.write(proxyResponse.getBytes());                    out.flush();                } catch (IOException ex) {                    ex.printStackTrace();                    System.err.println("Verbindung abgebrochen!");                }            }            System.out.printf("\nResponse für %d verschickt. \nDauer: " + duration + " \nBytes: " + response.length + " \nSocket: %s\n", request.hubRequestId, mobileSocket.toString());    }}