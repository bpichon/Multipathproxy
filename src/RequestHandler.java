import protocols.CPRequest;import protocols.CPResponse;import java.io.IOException;import java.io.OutputStream;import java.net.Socket;/** * Created by Bernd on 28.11.2015. */public class RequestHandler implements Runnable {    final Socket mobileSocket;    final private CPRequest request;    final private RequestMonitor monitor;    final private long processingStartTime;    public RequestHandler(final CPRequest request, final Socket mobileSocket, long processingStartTime) {        this.mobileSocket = mobileSocket;        this.request = request;        this.processingStartTime = processingStartTime;        this.monitor = RequestMonitor.getInstance();    }    @Override    public void run() {        OutputStream out;        try {            out = mobileSocket.getOutputStream();            byte[] response = monitor.getResponse(request);            int duration = (int) ((System.nanoTime() - processingStartTime) / 1000000); // Nano-Sek to Milli-Sek            final CPResponse proxyResponse = new CPResponse(request.hubRequestId, request.part, response);            out.write(proxyResponse.getBytes());            System.out.printf("\nResponse für %d verschickt. \nDauer: " + duration + " \nBytes: " + response.length + " \nSocket: %s\n", request.hubRequestId, mobileSocket.toString());            out.flush();            // out nicht closen!        } catch (IOException e) {            e.printStackTrace();        } finally {            // Socket nicht closen.        }    }}